from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from fahasa_database import FahasaDatabase
import time
import random
import json
import re
import os

def extract_price_smart(price_text):
    """Tr√≠ch xu·∫•t gi√° th√¥ng minh"""
    try:
        if not price_text:
            return 0.0
        
        # Lo·∫°i b·ªè k√Ω t·ª± kh√¥ng c·∫ßn thi·∫øt
        clean_text = re.sub(r'[^\d,.]', '', str(price_text))
        clean_text = clean_text.replace(',', '').replace('.', '')
        
        if clean_text and clean_text.isdigit():
            price = float(clean_text)
            # ƒêi·ªÅu ch·ªânh gi√° n·∫øu c·∫ßn
            if price < 1000:
                price *= 1000
            return price if price >= 1000 else 0.0
        return 0.0
    except:
        return 0.0

def scrape_fahasa_optimized():
    """Thu th·∫≠p Fahasa t·ªëi ∆∞u - 3 s√°ch c√≥ gi√°"""
    print("üöÄ THU TH·∫¨P FAHASA T·ªêI ∆ØU - 3 S√ÅCH")
    print("=" * 50)
    
    # Chrome setup
    chrome_options = Options()
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.set_page_load_timeout(20)
    
    books_data = []
    
    try:
        print("üåê Truy c·∫≠p Fahasa...")
        driver.get('https://www.fahasa.com/sach-trong-nuoc.html')
        time.sleep(3)
        
        print("üîç T√¨m s·∫£n ph·∫©m...")
        products = driver.find_elements(By.CSS_SELECTOR, '.item-inner')[:5]  # Ch·ªâ l·∫•y 5 s·∫£n ph·∫©m ƒë·∫ßu
        print(f"üìö T√¨m th·∫•y {len(products)} s·∫£n ph·∫©m")
        
        # L·∫•y URL s·∫£n ph·∫©m
        product_urls = []
        for product in products:
            try:
                link = product.find_element(By.TAG_NAME, 'a')
                url = link.get_attribute('href')
                if url and 'flashsale' not in url.lower():  # Tr√°nh flashsale
                    product_urls.append(url)
                    if len(product_urls) >= 3:  # Ch·ªâ c·∫ßn 3 s√°ch
                        break
            except:
                continue
        
        print(f"üîó S·∫Ω thu th·∫≠p {len(product_urls)} s√°ch")
        
        # Thu th·∫≠p t·ª´ng s√°ch
        for i, url in enumerate(product_urls, 1):
            print(f"\nüìñ S√°ch {i}/3:")
            print(f"    URL: {url}")
            
            try:
                driver.get(url)
                time.sleep(3)
                
                # Kh·ªüi t·∫°o d·ªØ li·ªáu
                book = {
                    'title': '',
                    'author': '',
                    'publisher': '',
                    'supplier': '',
                    'category_1': 'S√°ch trong n∆∞·ªõc',
                    'category_2': '',
                    'category_3': '',
                    'original_price': 0.0,
                    'discount_price': 0.0,
                    'discount_percent': 0.0,
                    'rating': 0.0,
                    'rating_count': 0,
                    'sold_count': '',
                    'sold_count_numeric': 0,
                    'publish_year': 0,
                    'language': 'Ti·∫øng Vi·ªát',
                    'page_count': 0,
                    'weight': 0.0,
                    'dimensions': '',
                    'url': url,
                    'url_img': '',
                    'description': ''
                }
                
                # L·∫•y title
                try:
                    title_elem = driver.find_element(By.TAG_NAME, 'h1')
                    book['title'] = title_elem.text.strip()
                    print(f"    ‚úÖ T√™n: {book['title']}")
                except:
                    print("    ‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c title")
                    continue
                
                # L·∫•y gi√° - th·ª≠ nhi·ªÅu c√°ch
                price_found = False
                
                # C√°ch 1: T√¨m trong element c√≥ ch·ªØ "ƒë" ho·∫∑c "VND"
                all_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'ƒë') or contains(text(), 'VND')]")
                for elem in all_elements:
                    text = elem.text.strip()
                    if re.search(r'\d{2,}', text):  # C√≥ √≠t nh·∫•t 2 ch·ªØ s·ªë
                        price = extract_price_smart(text)
                        if price > 0:
                            book['discount_price'] = price
                            book['original_price'] = price
                            print(f"    üí∞ Gi√°: {price:,.0f} VNƒê")
                            price_found = True
                            break
                
                # C√°ch 2: T√¨m trong data attributes
                if not price_found:
                    try:
                        price_elements = driver.find_elements(By.CSS_SELECTOR, '[data-price], .price, .current-price')
                        for elem in price_elements:
                            # Th·ª≠ data-price attribute
                            data_price = elem.get_attribute('data-price')
                            if data_price:
                                price = extract_price_smart(data_price)
                                if price > 0:
                                    book['discount_price'] = price
                                    book['original_price'] = price
                                    print(f"    üí∞ Gi√° (data): {price:,.0f} VNƒê")
                                    price_found = True
                                    break
                            
                            # Th·ª≠ text content
                            text = elem.text.strip()
                            if text and ('ƒë' in text or 'vnd' in text.lower()):
                                price = extract_price_smart(text)
                                if price > 0:
                                    book['discount_price'] = price
                                    book['original_price'] = price
                                    print(f"    üí∞ Gi√° (text): {price:,.0f} VNƒê")
                                    price_found = True
                                    break
                    except:
                        pass
                
                # C√°ch 3: T√¨m trong JavaScript/source
                if not price_found:
                    try:
                        page_source = driver.page_source
                        price_patterns = [
                            r'"price"[:\s]*"?(\d+)"?',
                            r'"current_price"[:\s]*"?(\d+)"?',
                            r'data-price="(\d+)"',
                            r'price["\']?\s*:\s*["\']?(\d+)'
                        ]
                        
                        for pattern in price_patterns:
                            matches = re.findall(pattern, page_source, re.IGNORECASE)
                            for match in matches:
                                price = extract_price_smart(match)
                                if price > 1000:  # Gi√° h·ª£p l√Ω
                                    book['discount_price'] = price
                                    book['original_price'] = price
                                    print(f"    üí∞ Gi√° (source): {price:,.0f} VNƒê")
                                    price_found = True
                                    break
                            if price_found:
                                break
                    except:
                        pass
                
                if not price_found:
                    print("    ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gi√°")
                
                # L·∫•y breadcrumb
                try:
                    breadcrumb = driver.find_element(By.CSS_SELECTOR, '.breadcrumb, .breadcrumbs')
                    links = breadcrumb.find_elements(By.TAG_NAME, 'a')
                    categories = [link.text.strip() for link in links if link.text.strip() and link.text.strip().lower() not in ['trang ch·ªß', 'home']]
                    
                    if len(categories) >= 2:
                        book['category_2'] = categories[1]
                    if len(categories) >= 3:
                        book['category_3'] = categories[2]
                        
                    print(f"    üìÇ Danh m·ª•c: {' > '.join(categories[:3])}")
                except:
                    pass
                
                # L·∫•y th√¥ng tin chi ti·∫øt
                try:
                    # T√¨m t·∫•t c·∫£ text ch·ª©a th√¥ng tin s√°ch
                    page_text = driver.page_source
                    
                    # T√°c gi·∫£
                    author_match = re.search(r'T√°c gi·∫£[:\s]*</?\w*>?\s*([^<\n]+)', page_text, re.IGNORECASE)
                    if author_match:
                        book['author'] = author_match.group(1).strip()
                        print(f"    üë§ T√°c gi·∫£: {book['author']}")
                    
                    # NXB
                    pub_match = re.search(r'NXB[:\s]*</?\w*>?\s*([^<\n]+)', page_text, re.IGNORECASE)
                    if pub_match:
                        book['publisher'] = pub_match.group(1).strip()
                        print(f"    üè¢ NXB: {book['publisher']}")
                    
                    # NƒÉm xu·∫•t b·∫£n
                    year_match = re.search(r'NƒÉm XB[:\s]*</?\w*>?\s*(\d{4})', page_text, re.IGNORECASE)
                    if year_match:
                        book['publish_year'] = int(year_match.group(1))
                        print(f"    üìÖ NƒÉm XB: {book['publish_year']}")
                
                except:
                    pass
                
                # Th√™m v√†o danh s√°ch
                books_data.append(book)
                print(f"    ‚úÖ ƒê√£ thu th·∫≠p th√†nh c√¥ng")
                
            except Exception as e:
                print(f"    ‚ùå L·ªói: {e}")
                continue
        
        print(f"\nüéâ Ho√†n th√†nh! Thu th·∫≠p ƒë∆∞·ª£c {len(books_data)} s√°ch")
        
        # Th·ªëng k√™
        books_with_price = [b for b in books_data if b['discount_price'] > 0]
        print(f"üìä C√≥ {len(books_with_price)}/{len(books_data)} s√°ch c√≥ gi√°")
        
        # L∆∞u d·ªØ li·ªáu
        if books_data:
            timestamp = time.strftime('%Y%m%d_%H%M%S')
            
            # JSON - G·ªôp v√†o file chung
            json_file = "fahasa_all_books.json"
            try:
                # ƒê·ªçc d·ªØ li·ªáu c≈© n·∫øu c√≥
                if os.path.exists(json_file):
                    with open(json_file, 'r', encoding='utf-8') as f:
                        existing_data = json.load(f)
                else:
                    existing_data = []
                
                # G·ªôp d·ªØ li·ªáu m·ªõi (ch·ªâ th√™m s√°ch ch∆∞a c√≥)
                existing_titles = {book['title'] for book in existing_data}
                new_books = [book for book in books_data if book['title'] not in existing_titles]
                
                if new_books:
                    existing_data.extend(new_books)
                    with open(json_file, 'w', encoding='utf-8') as f:
                        json.dump(existing_data, f, ensure_ascii=False, indent=2)
                    print(f"üíæ ƒê√£ c·∫≠p nh·∫≠t JSON: {json_file} (+{len(new_books)} s√°ch m·ªõi)")
                else:
                    print(f"üíæ JSON: {json_file} (kh√¥ng c√≥ s√°ch m·ªõi)")
                    
            except Exception as e:
                print(f"‚ùå L·ªói JSON: {e}")
            
            # Database
            try:
                db = FahasaDatabase()
                inserted = db.insert_books(books_data)
                print(f"üóÑÔ∏è ƒê√£ l∆∞u {inserted} s√°ch v√†o database")
                
                # Excel - File chung t·ª´ database
                excel_file = "fahasa_all_books.xlsx"
                excel_file = db.export_to_excel(excel_file)
                print(f"üìä ƒê√£ c·∫≠p nh·∫≠t Excel: {excel_file}")
                
            except Exception as e:
                print(f"‚ùå L·ªói database: {e}")
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            print(f"\nüìö K·∫æT QU·∫¢:")
            for i, book in enumerate(books_data, 1):
                price_text = f"{book['discount_price']:,.0f} VNƒê" if book['discount_price'] > 0 else "Ch∆∞a c√≥ gi√°"
                print(f"{i}. {book['title']}")
                print(f"   - T√°c gi·∫£: {book['author'] or 'Ch∆∞a c√≥'}")
                print(f"   - Gi√°: {price_text}")
                print(f"   - NXB: {book['publisher'] or 'Ch∆∞a c√≥'}")
                print()
        
    except Exception as e:
        print(f"‚ùå L·ªói chung: {e}")
    
    finally:
        input("‚è∏Ô∏è Nh·∫•n Enter ƒë·ªÉ ƒë√≥ng browser...")
        driver.quit()
        print("üîö ƒê√£ ƒë√≥ng browser")

if __name__ == "__main__":
    scrape_fahasa_optimized()